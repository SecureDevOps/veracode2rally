package veracode2rally;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPathExpressionException;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

public class detailedreport_do {
	private static String TimeStamp;

	// Class to download a detailed flaw report from Veracode and send to Rally as
	// new defects.

	public static void main(String build_id) throws FileNotFoundException, IOException, XPathExpressionException,
			ParserConfigurationException, SAXException {

		TimeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
		System.out.println(TimeStamp + "  Downloading Veracode Detailed Flaw Report");

		try {

			// Set console print stream so we can download the flaw report to
			// XML
			PrintStream ps_console = System.out;
			File file = new File("resources/detailedreport.xml");
			FileOutputStream fos = new FileOutputStream(file);

			// Create new print stream for file.
			PrintStream ps = new PrintStream(fos);

			// Set file print stream.
			System.setOut(ps);

			System.out.print(credentials.getInstance().getresultswrapper().detailedReport(build_id));

			System.setOut(ps_console);

		} catch (IOException e) {
			e.printStackTrace();

		}

		RunXSLT();
	}

	public static void RunXSLT() {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		Document document;

		try {
			File stylesheet = new File("resources/veracode2rally.xsl");
			File datafile = new File("resources/detailedreport.xml");

			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.parse(datafile);

			// Use a Transformer for output
			TransformerFactory tFactory = TransformerFactory.newInstance();
			StreamSource stylesource = new StreamSource(stylesheet);
			Transformer transformer = tFactory.newTransformer(stylesource);

			DOMSource source = new DOMSource(document);
			StreamResult result = new StreamResult(new File("resources/veracode2rally.xml"));

			transformer.transform(source, result);

		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			System.out.println("\n** Transformer Factory error");
			System.out.println("   " + tce.getMessage());

			// Use the contained exception, if any
			Throwable x = tce;

			if (tce.getException() != null) {
				x = tce.getException();
			}

			x.printStackTrace();
		} catch (TransformerException te) {
			// Error generated by the parser
			System.out.println("\n** Transformation error");
			System.out.println("   " + te.getMessage());

			// Use the contained exception, if any
			Throwable x = te;

			if (te.getException() != null) {
				x = te.getException();
			}

			x.printStackTrace();
		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;

			if (sxe.getException() != null) {
				x = sxe.getException();
			}

			x.printStackTrace();
		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();
		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}

	}

}
